<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Y&#39;s</title>
		<link>https://pyx-py.github.io/posts/</link>
		<description>Recent content in Posts on Y&#39;s</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 29 Apr 2020 16:09:27 +0800</lastBuildDate>
		<atom:link href="https://pyx-py.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Host_root_passwd</title>
			<link>https://pyx-py.github.io/posts/host_root_passwd/</link>
			<pubDate>Wed, 29 Apr 2020 16:09:27 +0800</pubDate>
			
			<guid>https://pyx-py.github.io/posts/host_root_passwd/</guid>
			<description>记一次主机root密码修改 有个需要修改远程主机root密码的需求，但是通过passwd来修改的话，就需要程序和主机进行shell的交互，比较</description>
			<content type="html"><![CDATA[<h1 id="记一次主机root密码修改">记一次主机root密码修改</h1>
<p>    有个需要修改远程主机root密码的需求，但是通过passwd来修改的话，就需要程序和主机进行shell的交互，比较麻烦，于是找了条命令:</p>
<pre><code>echo password | passwd --stdin root
</code></pre>
<p>    可以直接在root用户下修改日root密码，开始都没啥问题，直到输入了一个带<code>$</code>符号的密码，发现修改之后的密码和实际上的对不上了，意识到echo语句里面很多特殊符号是有含义的，于是开始对各种符号进行测试总结。</p>
<p>    通过这行命令修改主机root密码的可用特殊字符:<br>
<code>@</code> <code>%</code> <code>#</code> <code>^</code>  <code>*</code> <code>-</code> <code>=</code> <code>_</code> <code>+</code> <code>?</code> <code>/</code> <code>,</code> <code>.</code> <code>:</code><br>
    不可用的的特殊字符包括：<br>
<code>!</code> &ndash;结果：密码会直接修改不成功<br>
<code>$</code> &ndash;结果：新密码能够修改成功，但是修改后的密码完全不符合预期，如果<code>$</code>后面接字母，比如<code>qwer$qwer</code>, 那么会去掉<code>$</code>和他之后的部分，真正更新的密码会是qwer；如果<code>$</code>后面接数字，比如<code>qwer$1234</code>, 那么会依照shell的语法，取对应数字下标的命令行参数，但是单独这行命令是没有定义过命令行参数的，所以<code>$1</code>表示为空被去掉了，实际上密码变成了<code>qwer234</code><br>
<code>&amp;</code>&ndash;结果：密码修改不成功，比如密码是<code>qwer&amp;1234</code>, &amp;符号会作为将echo指令后台运行的命令，<code>qwer</code>会被打印，<code>1234</code>将作为新的一行命令，当然运行不了<br>
<code>(</code>和<code>)</code>&ndash;结果：密码修改不成功<br>
<code>\</code>&ndash;结果：密码修改成功但是不符合预期，<code>\</code>会作为转义符，后面接不同的字符会有不同的含义，至少和预期的密码不一样<br>
<code>;</code>&ndash;结果：密码修改不成功，和<code>&amp;</code>类似，echo命令运行完成打印<code>qwer</code>,<code>1234</code>作为新命令无法运行<br>
<code>&lt;</code>和<code>&gt;</code>&ndash;结果：密码修改不成功，<code>&lt;</code>和<code>&gt;</code>会作为输入输出重定向符号使用，可是<code>1234</code>没有含义，内容不能输出也不能输入</p>
<hr>
<p>    至此大部分能用到的特殊符号已经测试过了，没有测试过的我也不打算测了，那么解决办法有两种：</p>
<blockquote>
<ol>
<li>在程序里边把捕捉密码中的不可用特殊字符，返回错误信息</li>
<li>使用<code>echo 'password' | passwd --stdin root</code>,将密码用'&lsquo;包括起来，这样即便密码中含有特殊字符也能正常使用，但是这种办法需要将含有&rsquo;单引号的密码屏蔽掉，因为如果这样的<code>pass'word</code>的密码也是不成功的</li>
</ol>
</blockquote>
]]></content>
		</item>
		
	</channel>
</rss>
